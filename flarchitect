#!/bin/bash

function usage(){
	echo -e "\nUsage: 
	create [PROJECT_NAME],
	create-view [PROJECT_NAME] [VIEW_NAME],
	create-template [PROJECT_NAME] [TEMPLATE_NAME],
	create-env [PROJECT_NAME],
	del-env [PROJECT_NAME],
	reset-env [PROJECT_NAME],
	run-debug [PROJECT_NAME],
	banner\n"
}

function run_debug_server(){
	chmod +x "$1/bin/run_server"
	./"$1/bin/run_server"
}

function create_project(){
	PROJECT_NAME=$1

	if [[ -d "$PROJECT_NAME" ]]; then
		echo -e "\nProject $PROJECT_NAME already exists.\n"
		exit 1
	fi

	if ! [[ -d "$PROJECT_NAME" ]]; then
		mkdir "$PROJECT_NAME"
		mkdir "$PROJECT_NAME/bin"
		touch "$PROJECT_NAME/bin/run_server"
		python3 flarchitects/flarchitects.py "bin" "$PROJECT_NAME"
		touch "$PROJECT_NAME/setup.py"
		python3 flarchitects/flarchitects.py "setup" "$PROJECT_NAME"
		mkdir "$PROJECT_NAME/$PROJECT_NAME"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/bin"
		touch "$PROJECT_NAME/$PROJECT_NAME/__init__.py"
		python3 flarchitects/flarchitects.py "init" "$PROJECT_NAME"
		touch "$PROJECT_NAME/$PROJECT_NAME/config.py"
		python3 flarchitects/flarchitects.py "config" "$PROJECT_NAME"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/authorization"
		touch "$PROJECT_NAME/$PROJECT_NAME/authorization/__init__.py"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/css"
		touch "$PROJECT_NAME/$PROJECT_NAME/css/style.css"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/sql"
		touch "$PROJECT_NAME/$PROJECT_NAME/sql/__init__.py"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/static"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/static/css"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/static/images"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/static/js"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/templates"
		touch "$PROJECT_NAME/$PROJECT_NAME/templates/hello_world.html"
		python3 flarchitects/flarchitects.py "template" "$PROJECT_NAME" "hello_world"
		mkdir "$PROJECT_NAME/$PROJECT_NAME/views"
		INIT_FILE="$PROJECT_NAME/$PROJECT_NAME/views/__init__.py"
		touch "$INIT_FILE"
		python3 flarchitects/flarchitects.py "view" "$PROJECT_NAME" "hello_world"
		echo "from $PROJECT_NAME.views.hello_world import *" >> "$INIT_FILE"
		echo -e "\nSetup flask project architecture for project '$PROJECT_NAME'."
		if [[ -x "$(command -v tree)" ]]; then
			tree "$PROJECT_NAME"
			echo -e "\n"
		fi
	fi
}

function create_env(){
	cd $1
	python3 -m venv env
	source env/bin/activate
	pip install --upgrade pip
	pip install flask
	cd ../
	echo -e "\nCreated new environment in project '$1'.\n"
}

function install_app(){
	cd $1
	pip install -e .
	cd ../
	echo -e "\nCreated and installed project $1.\n"
}

case "$1" in
	"create")
		if [[ -z "$2" ]]; then
			usage
			exit 1
		fi
		create_project "$2"
		install_app "$2"
		;;

	"create-view")
		if [[ -z "$2" ]] || [[ -z "$3" ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		if ! [[ -d "$PROJECT_NAME" ]]; then
			echo -e "\nUnable to locate project $PROJECT_NAME.\n"
			exit 1
		fi
		VIEW_NAME=$3
		NEWFILE="$PROJECT_NAME/$PROJECT_NAME/views/$VIEW_NAME.py"
		INIT="$PROJECT_NAME/$PROJECT_NAME/views/__init__.py"
		touch $NEWFILE
		echo "from $PROJECT_NAME.views.$VIEW_NAME import *" >> $INIT
		echo -e "\nCreated view $VIEW_NAME in project '$PROJECT_NAME'...\n"
		python3 flarchitects/flarchitects.py "view" "$PROJECT_NAME" "$VIEW_NAME"
		;;

	"create-template")
		if [[ -z $2 ]] || [[ -z $3 ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		if ! [[ -d "$PROJECT_NAME" ]]; then
			echo -e "\nUnable to locate project $PROJECT_NAME.\n"
			exit 1
		fi
		TEMPLATE_NAME=$3
		touch "$PROJECT_NAME/$PROJECT_NAME/templates/$TEMPLATE_NAME.html"
		echo -e "Created template $TEMPLATE_NAME...\n"
		;;

	"create-env")
		if [[ -z $2 ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		if ! [[ -d "$PROJECT_NAME" ]]; then
			echo -e "\nUnable to locate project $PROJECT_NAME.\n"
			exit 1
		fi
		if [[ -d "$PROJECT_NAME/env" ]]; then
			echo -e "\nVirtual environment already created"
			echo "To delete run del-env [PROJECT_NAME]"
			echo -e "To reset run reset-env [PROJECT_NAME]\n"
			exit 1
		fi
		create_env $PROJECT_NAME
		install_app $PROJECT_NAME
		;;

	"del-env")
		if [[ -z $2 ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		if ! [[ -d "$PROJECT_NAME" ]]; then
			echo -e "\nUnable to locate project $PROJECT_NAME.\n"
			exit 1
		fi
		if ! [[ -d "$PROJECT_NAME/env" ]]; then
			echo -e "\nNo existing environment to delete in project '$PROJECT_NAME'.\n"
			exit 1
		fi
		rm -rf "$PROJECT_NAME/env"
		echo -e "\nDeleted environment from project $PROJECT_NAME.\n"
		;;

	"reset-env")
		if [[ -z $2 ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		if ! [[ -d "$PROJECT_NAME" ]]; then
			echo -e "\nUnable to locate project $PROJECT_NAME.\n"
			exit 1
		fi
		if [[ -d "$PROJECT_NAME/env" ]]; then
			rm -rf "$PROJECT_NAME/env"
		fi
		create_env $PROJECT_NAME
		install_app $PROJECT_NAME
		;;

	"run-debug")
		if [[ -z $2 ]]; then
			usage
			exit 1
		fi
		PROJECT_NAME=$2
		run_debug_server $PROJECT_NAME
		;;

	"help")
		echo -e "\n************************************************************************************"
		echo "The Flarchitect framework aims to provide easy, concise, and rapid development"
		echo "of small Python-Flask projects. To construct a new project, run"
		echo "./flarchitect create [PROJECT_NAME]"
		echo
		echo "This will create a neat directory structure with all the necessary starter"
		echo "files included for you. It creates a view-template architecture where most"
		echo "of your python3 code lives in the views/ directory."
		echo
		echo "Your routing schemes live in the views/ directory, and your html templates"
		echo "live in the templates/ directory."
		echo
		echo "For a getting started example, take a look at the README!"
		echo -e "************************************************************************************\n"
		;;

	"banner")
		echo "        ███                         █        █                               
 ██████   █                         █               █                    █   
 █        █                         █               █                    █   
 █        █    ░███░   █▒██▒  ▓██▒  █▒██▒  ███    █████   ███    ▓██▒  █████ 
 █        █    █▒ ▒█   ██  █ ▓█  ▓  █▓ ▒█    █      █    ▓▓ ▒█  ▓█  ▓    █   
 ██████   █        █   █     █░     █   █    █      █    █   █  █░       █   
 █        █    ▒████   █     █      █   █    █      █    █████  █        █   
 █        █    █▒  █   █     █░     █   █    █      █    █      █░       █   
 █        █░   █░ ▓█   █     ▓█  ▓  █   █    █      █░   ▓▓  █  ▓█  ▓    █░  
 █        ▒██  ▒██▒█   █      ▓██▒  █   █  █████    ▒██   ███▒   ▓██▒    ▒██ 
"
		;;

	*)
		usage
		;;
esac
